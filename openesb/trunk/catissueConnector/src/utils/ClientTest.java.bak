package utils;

import java.io.StringWriter;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.representation.Form;

public class ClientTest {

	
	public void prints(Node node) {		
		System.out.println("XX1 " + node.getNodeValue());
	    System.out.println("XX2 " + node.getNodeName());
	    System.out.println("XX3 " + node.getTextContent());
	}
	
	Patient p = null;
	ArrayList<Patient> pa = new ArrayList<Patient>();
	
	public void doSomething(Node node) {
	    // do something with the current node instead of System.out
	    //System.out.println(node.getNodeName());	
		
	    NodeList nodeList = node.getChildNodes();
	    for (int i = 0; i < nodeList.getLength(); i++) {
	        Node currentNode = nodeList.item(i);
	   
			if (currentNode != null)
			{
	        
	        if (currentNode.getNodeName().equals("cat:patient"))
	        {
	        	if (p != null) { pa.add(p); }
	        	p = new Patient();
	        	System.out.println("X");
	        	prints(currentNode);
	        }
	        
	        if (currentNode.getNodeName().equals("cat:patient_id"))
	        {
	        	p.setPatient_id(currentNode.getTextContent());
	        	prints(currentNode);
	        }
	        
	        if (currentNode.getNodeName().equals("cat:vital_status_cd"))
	        {
	        	p.setVital_status_cd(currentNode.getTextContent());
	        	prints(currentNode);
	        }
	        
	        if (currentNode.getNodeName().equals("cat:birth_date"))
	        {
	        	p.setBirth_date(currentNode.getTextContent());
	        	prints(currentNode);
	        }
	        
	        if (currentNode.getNodeName().equals("cat:age_in_years_num"))
	        {
	        	p.setAge_in_years_num(currentNode.getTextContent());
	        	prints(currentNode);
	        }
	        
	        if (currentNode.getNodeName().equals("cat:race_cd"))
	        {
	        	p.setRace_cd(currentNode.getTextContent());
	        	prints(currentNode);
	        }
	        
	        if (currentNode.getNodeName().equals("cat:sex_cd"))
	        {
	        	p.setSex_cd(currentNode.getTextContent());
	        	prints(currentNode);
	        }
	        
	        if (currentNode.getNodeName().equals("cat:study_name"))
	        {
	        	p.setStudy_name(currentNode.getTextContent());
	        	prints(currentNode);
	        }
	        
			}
	        
	        
	        if (currentNode.getNodeType() == Node.ELEMENT_NODE) {
	            //calls this method for all the children which is Element
	        	
	            doSomething(currentNode);
	        }
	    }
	    
	    
	}
	
	public Document performCall(Node xmls)
	{
		doSomething(xmls);
		pa.add(p);
		
		
		
        ClientConfig config = new DefaultClientConfig();
        Client client = Client.create(config);
        WebResource service = client.resource(getBaseURI());

        System.out.println( "X" + xmls.getTextContent() + "X");
        
      /*  String xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
        		"<pdo:patient_data xmlns:pdo=\"http://www.i2b2.org/xsd/hive/pdo/1.1/pdo\">" +
        		"        			<pdo:patient_set>" +
        		"   <patient download_date=\"2012-10-02T12:30:04 00:00\" import_date=\"2012-10-02T12:30:04 00:00\" sourcesystem_cd=\"BRICCS\" update_date=\"2012-10-02T12:30:04 00:00\" upload_id=\"1\">" +
        		"   <patient_id source=\"BRICCS\">dejmo-835619175</patient_id>" +
        		"   <param column=\"vital_status_cd\" name=\"date interpretation code\">N</param>" +
        		"   <param column=\"birth_date\" name=\"birthdate\">1912-10-15T00:00:00.000 01:00</param>" +
        		"   <param column=\"age_in_years_num\" name=\"age\">99</param>" +
        		"   <param column=\"race_cd\" name=\"ethnicity\">Unknown</param>" +
        		"   <param column=\"sex_cd\" name=\"sex\">UNSPECIFIED</param>" +
        		"   <study_name source=\"BRICCS\">cp1356016280136</study_name>" +
        		"  </patient>" +
        		" </pdo:patient_set>" +
        		"</pdo:patient_data>";*/
        
        //System.out.println(xml);
        
        //Form form = new Form();
        //form.add( "incomingXML", xml ); 
        //form.add( "activity_id", "941" );
        
        
        List<String> out = new ArrayList<String>();
        
        
        
        if (pa != null)
		{
			int j = 0;
			for (Patient patient : pa) {
				
				 j++;
				 System.out.println(j);
		         System.out.println(patient);
		         System.out.println();
		         
		         
		         String xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
		         		"<pdo:patient_data xmlns:pdo=\"http://www.i2b2.org/xsd/hive/pdo/1.1/pdo\">" +
		         		"        			<pdo:patient_set>" +
		         		"   <patient download_date=\"2012-10-02T12:30:04 00:00\" import_date=\"2012-10-02T12:30:04 00:00\" sourcesystem_cd=\"BRICCS\" update_date=\"2012-10-02T12:30:04 00:00\" upload_id=\"1\">" +
		         		"   <patient_id source=\"BRICCS\">" + patient.getPatient_id() + "</patient_id>" +
		         		"   <param column=\"vital_status_cd\" name=\"date interpretation code\">" + patient.getVital_status_cd() + "</param>" +
		         		"   <param column=\"birth_date\" name=\"birthdate\">" + patient.getBirth_date() + "</param>" +
		         		"   <param column=\"age_in_years_num\" name=\"age\">" + patient.getAge_in_years_num() + "</param>" +
		         		"   <param column=\"race_cd\" name=\"ethnicity\">" + patient.getRace_cd() + "</param>" +
		         		"   <param column=\"sex_cd\" name=\"sex\">" + patient.getSex_cd() + "</param>" +
		         		"   <study_name source=\"BRICCS\">" + patient.getStudy_name() + "</study_name>" +
		         		"  </patient>" +
		         		" </pdo:patient_set>" +
		         		"</pdo:patient_data>";
		         
		         Form form = new Form();
		         form.add( "incomingXML", xml ); 
		         form.add( "activity_id", "941" );
		         
		         System.out.println(xml);
		         
		         
		         ClientResponse response = service.path("service").path("pdo").type(MediaType.APPLICATION_XML).post(ClientResponse.class, form);
		         
		         System.out.println("performCall Output from Server .... \n");
		         		         
		         String output = response.getEntity(String.class);
		         
		         out.add(output);
		         //out.add("Success");
		         
		    }
		}
        
        // ClientResponse response = service.path("service").path("pdo").type(MediaType.APPLICATION_XML).post(ClientResponse.class, form);          
 		//System.out.println("performCall Output from Server .... \n");
 		//String output = response.getEntity(String.class);
 		//System.out.println(output);
 		//return output;
 		
        Document document = createContactNode(out);
 	    
 		return document;
 		//return "<result><status>Success</status></result><result><status>Failure</status></result>";
 	    //return createContactNode(out); 				
	}

	public Document createContactNode(List<String> outp) {

		System.out.println("1 ");
        Document document = null;
 		
        System.out.println("1 ");
 		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
 	    
 		System.out.println("12 ");
 		try {
 			System.out.println("13 ");
 	      DocumentBuilder builder = factory.newDocumentBuilder();
 	     System.out.println("14 ");
 	      document = builder.newDocument();
 	      
 	     System.out.println("15 ");
 	     Element root = document.createElement("results");
 	     document.appendChild(root);
 		    
 	     for (String res : outp) {
 	    	System.out.println("71 " + res);
 	    	System.out.println("x " + document);
 	        Element result = document.createElement("result");
 	        System.out.println("18 ");
 	 		Element status = document.createElement("status");
 	 		System.out.println("19 ");
 	 		status.appendChild(document.createTextNode(res));
 	 		System.out.println("111 ");
 	 		result.appendChild(status);
 	 		System.out.println("122 ");
 	    	root.appendChild(result); 	
 	    	

	    	System.out.println("yk " + result.toString());
 	    	System.out.println("133 ");
 	    	System.out.println("yk " + document.toString());
 	 	   
 	     }
 	      
 	    }catch (ParserConfigurationException parserException) {
 	      parserException.printStackTrace();
 	    }
 	    
 	    System.out.println("y " + document.toString());
	    	    
 	    //set up a transformer
        TransformerFactory transfac = TransformerFactory.newInstance();
        Transformer trans;
		try {
			trans = transfac.newTransformer();
			 trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
		        trans.setOutputProperty(OutputKeys.INDENT, "yes");

		        //create string from xml tree
		        StringWriter sw = new StringWriter();
		        StreamResult result = new StreamResult(sw);
		        DOMSource source = new DOMSource(document);
		        try {
					trans.transform(source, result);
				} catch (TransformerException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		        String xmlString = sw.toString();

		        //print xml
		        System.out.println("Here's the xml:\n\n" + xmlString);

		} catch (TransformerConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
               
	    return document;
	  }


    public static void main(String[] args) {
    	ClientTest c = new ClientTest();
    	List s = new ArrayList();  	
    	s.add("L");    	
    	s.add("Le");   
    	s.add("Lew");   
    	c.createContactNode(s);
     	
    	/*String s = c.performCall("");*/
    }

    // /catissueplusWS/rest/service/pdo
    
    private static URI getBaseURI() {
        return UriBuilder.fromUri("http://hack5.brisskit.le.ac.uk/catissueplusWS/rest").build();
    }

}

